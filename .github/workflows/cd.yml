on:
  push:
    branches:
      - cd-test
  pull_request:
    branches:
      - cd-test

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 将仓库代码复制到虚拟机文件系统中

      - name: Set up Go
        uses: actions/setup-go@v5 # 安装go依赖
        with:
          go-version: 1.22.0 # 指定go依赖版本

      - name: Install Node.js
        uses: actions/setup-node@v4 # 安装nodejs
        with:
          node-version: "16" # 指定nodejs 版本

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli # 安装quasar/cli

      - name: Install frontend dependencies
        working-directory: frontend # 以项目根目录为起点,指定对应目录
        run: npm install # 安装前端依赖

      - name: Build Application (Windows x64)
        shell: bash # 我不喜欢powershell(即使是在windows下) # 这个指定, 应该会让我们使用git-bash。
        run: | # 指定此run为多个命令依次执行
          cd sdk
          make win

      - name: Find the generated installer (Windows x64)
        working-directory: frontend/dist/electron/Packaged
        shell: bash # 由于我们下方要使用的find命令, powershell中没有(更重要的是, 我不喜欢powershell) # 这个指定, 应该会让我们使用git-bash。
        run: |
          # 由于find  -name 'KeyTone-Setup-*-win.exe'得到的结果为./KeyTone-Setup-*-win.exe , 而我们不需要./ , 因此使用basename提取文件名
          # 由于大部分人的计算机是x64架构的(现在x86的纯32位系统几乎没人用了, 因此我的应用只支持64位的机器), 所以默认不显示架构。(我们通过正则表达式来除掉这部分)(主要显示了3中形式太乱, 如amd64、x64、x86_64)
          # * 这部分正则的原理是,  替换: 将 `从win末尾的任意字符开头至遇到第一个.后的所有内容`  使用`win.` 来替换。
          # ----------------------------------------------------------------------------------------INSTALLER_NAME_SETUP_EXE
          INSTALLER_NAME_SETUP_EXE=$(basename $(find -name 'KeyTone-*-win*exe'))
          # ----------为避免出现amd64、x86_64、x64等多种x64的cpu架构表示方式, 我仅按x64为默认名来显示此类cpu架构名---start
          # * 我们仅按x64为默认名来显示的话, 就存在其结果本身就是x64这个名称的情况, 那此时仍通过 mv 重命名就会发生报错了。
          #   * 因为, 在进行mv时, 遇到移动前后名称相同的情况, 是会报错的。 
          #   * 所以, 我们为了不报错, 我们尝试通过`-f`来强制重命名来解决。(失败)<因为-f解决覆盖问题, 但无法处理此情况>
          #   * 最终, 借助shell中的判断语句来解决
          if [ "$INSTALLER_NAME_SETUP_EXE" != "$(echo $INSTALLER_NAME_SETUP_EXE | sed 's/win[^.]*\./win-x64./')" ]; then
            mv -f $INSTALLER_NAME_SETUP_EXE $(echo $INSTALLER_NAME_SETUP_EXE | sed 's/win[^.]*\./win-x64./')
            INSTALLER_NAME_SETUP_EXE=$(echo $INSTALLER_NAME_SETUP_EXE | sed 's/win[^.]*\./win-x64./')
          fi
          # ------------为避免出现amd64、x86_64、x64等多种x64的cpu架构表示方式, 我仅按x64为默认名来显示此类cpu架构名---end
          echo "INSTALLER_NAME_SETUP_EXE=$INSTALLER_NAME_SETUP_EXE" >> $GITHUB_ENV

      - name: Calculate File Hashes (Windows x64)
        shell: bash
        run: |
          SHA256=$(sha256sum frontend/dist/electron/Packaged/${{ env.INSTALLER_NAME_SETUP_EXE }} | awk '{print $1}')
          MD5=$(md5sum frontend/dist/electron/Packaged/${{ env.INSTALLER_NAME_SETUP_EXE }} | awk '{print $1}')
          echo "SHA256=$SHA256" >> $GITHUB_ENV
          echo "MD5=$MD5" >> $GITHUB_ENV

      - name: Upload Build Artifact (Windows x64)
        uses: actions/upload-artifact@v3 # 安装用于上传最终打包结果到执行完毕界面的脚本
        with:
          name: ${{ env.INSTALLER_NAME_SETUP_EXE }}
          path: frontend/dist/electron/Packaged/${{ env.INSTALLER_NAME_SETUP_EXE }}

  release:
    runs-on: ubuntu-latest
    needs: build # 我们release工作job的执行, 需要等待build的工作job执行结束。
    steps:
      - name: Download Build Artifact (ALL)
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.INSTALLER_NAME_SETUP_EXE }}

      - name: Create GitHub Release
        id: create_release # id 项的作用是为这个步骤分配一个唯一的标识符。 使得你可以在后续的步骤中引用这个步骤的输出或状态(以step开头)。这样可以使工作流更加清晰和易于维护。
        uses: actions/create-release@v1 # 安装用户自动创建release的脚本
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          tag_name: ${{ github.ref }} # 选择此release的tag名称<准确来讲这是触发工作流的分支或标签的完整引用--即带前缀的`refs/heads/ 或 refs/tags/ 前缀`>(可以尝试手动创建一个release, 其界面上是有一个让你选择tag的选项框的)
          release_name: Release ${{ github.ref_name }} # 这个是当前release的名称<这个并非像上面一样的完整引用--即不包括`refs/heads/ 或 refs/tags/ 前缀`>。(理论上github.ref_name的值: 如果当前actions是被push/tag触发的, 则会选择tag名; 若仅是push触发, 则会选择分支名)
          draft: true # 此项为true, 表示发布的是仅自己可见的草稿(我们可以手动编辑检查后在手动发布)
          prerelease: false # 此项若为true, 则会将release打上预发布标志
          body: |
            ### Overview 

            ### Security

            ##### The SHA256 hash sum

            `${{ env.INSTALLER_NAME_SETUP_EXE }}` is:

            * `${{ env.SHA256 }}`

            ##### The MD5 hash sum

            `${{ env.INSTALLER_NAME_SETUP_EXE }}` is:

            * `${{ env.MD5 }}`

            ### Changelogs

      - name: Upload Build Artifact to Release
        uses: actions/upload-release-asset@v1 # 安装用于上传最终打包结果到本次release的脚本
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 这里就通过之前步骤的唯一id, 进行了进一步的操作(以将构建后的结果, 上传到此步骤的可供用户下载的地方)
          asset_path: ./${{ env.INSTALLER_NAME_SETUP_EXE }}
          asset_name: ${{ env.INSTALLER_NAME_SETUP_EXE }}
          asset_content_type: application/octet-stream # asset_content_type 的作用是指定上传文件的 MIME 类型。在这个例子中，它被设置为 application/octet-stream，这是一种通用的二进制文件类型。这样做的目的是告诉 GitHub 这个文件的类型，以便在下载时正确处理它。


      # - name: Upload Build Artifact ZIP to Release
      #   uses: actions/upload-release-asset@v1 # 安装用于上传最终打包结果到本次release的脚本
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # 这里就通过之前步骤的唯一id, 进行了进一步的操作(以将构建后的结果, 上传到此步骤的可供用户下载的地方)
      #     asset_path: ./${{ env.INSTALLER_NAME_NO_EXE}}_exe.zip
      #     asset_name: ${{ env.INSTALLER_NAME_NO_EXE }}_exe.zip
      #     asset_content_type: application/zip # asset_content_type 的作用是指定上传文件的 MIME 类型。在这个例子中，它被设置为 application/zip，这是一种通用的压缩文件类型。这样做的目的是告诉 GitHub 这个文件的类型，以便在下载时正确处理它。

  ######################################################################################################### build win
  # build_windows_x64:
  #   runs-on: windows-latest # 指定虚拟机
  # build_windows_arm64: # TIPS: github actions 的官方运行器暂不提供arm架构下的, win和linux系统环境。 如有需要, 只能自定义运行器。
  ######################################################################################################### build linux
  # build_linux_x64:
  #   runs-on: linux-latest # 指定虚拟机
  # build_linux_arm64: # TIPS: github actions 的官方运行器暂不提供arm架构下的, win和linux系统环境。 如有需要, 只能自定义运行器。
  ######################################################################################################### build macos
  # build_macos_x64:
  #   runs-on: macos-13 # 指定虚拟机
  # build_macos_arm64:
  #   runs-on: macos-latest # 指定虚拟机 macos14
  ######################################################################################################### build macos
