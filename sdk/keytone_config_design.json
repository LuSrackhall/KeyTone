{
  "name": "键音包名称",
  "source_sound_path": {
    "1": "路径1",
    "2": "路径2",
    "3": "路径3",
    "4": "路径4",
    "5": "路径5",
    "6": "路径6",
    "7": "路径7",
    "8": "路径8",
    "9": "路径9"
  },
  "key_sound": {
    // "key_sound_name_1": {
    //   "down": {
    //     "source_sound_path": "原始声音路径",
    //     "cut": { "start": 0, "end": 123 },
    //     "volume": 5
    //   },
    //   "up": {
    //     "source_sound_path": "原始声音路径",
    //     "cut": { "start": 0, "end": 123 },
    //     "volume": 5
    //   }
    // }

    // 用户可自行在key_sound_name_1 后, 设置名称为down或up(如key_sound_name_1_down和key_sound_name_1_up)。 官方不对此做强制干涉。
    "key_sound_name_1": {
      "source_sound_path": "原始声音路径",
      "cut": { "start": 0, "end": 123 },
      "volume": 5,
      "group": "" // 为了使键音包更容易管理, 引入group机制
    },
    "key_sound_name_2": {
      "source_sound_path": "原始声音路径",
      "cut": { "start": 130, "end": 253 },
      "volume": 5,
      "group": "" // 为了使键音包更容易管理, 引入group机制
    }
  },
  "global": {
    // 自定义键音随机容器
    // * 此容器, 只存储键音, 至于如何处理容器, 则需要其它配置来决定(目前决定均按照默认随机来处理)
    "custom_key_sound_container": {
      // 名字可以随便取
      // * 比如可以按照是否随机来分类,
      //   * 大于等于两个的, 为随机, 可以名称中带随机。当然, 不作强制要求, 您完全可以不带这个, 取您自己喜欢的名字。
      //   * down只有一个键音的, 为固定, 可以名称中带固定。当然, 不作强制要求, 您完全可以不带, 取您自己喜欢的名字。
      "random_name_1": {
        // "mode": "random", // 模式可以是随机, 按顺序循环, 或单独固定。 // 不再此内部做任何模式选择, 因为按顺序循环在个人看来似乎是个伪需求。
        // * (就算后续真的有这个需求, 则只需加入一个是否按顺序的条件布尔变量即可), 如下:
        // "is_sequential_loop": "true", // 仅到此选项为"true"时, 调用顺序循环算法来处理, 否则调用默认的随机处理器。(这个也完全可以放到键音容器处理器中去, 而不是在容器配置中)
        "down": [],
        "up": []
      }
    },
    "specify_key_sound_container": "random_name_1",
    // 配置按键声音处理器(好像没有什么需要配置的, 暂时就这样空着吧!)
    "key_sound_container_processor": {
      // "mode": "" // 默认为random, 可选loop(即顺序循环)。(固定不用在模式中配置, 仅有一个键音的容器, 则默认只能固定播放)
      /* 感觉这个mode有点破坏可扩展性
       * * 比如随机模式, 我想配置个  小于 容器总时长 的 不重复 时间长度-- 比如2秒内, 不能有重复的键音 -- 貌似 小于 容器总时长不太合理 应该是受手指按键速度影响....算了, 没考虑清楚, 后续好好思考下这个
       */
    }
  },

  // 这里默认是空对象, 用户每主动配置一个, 就会增加一个。每删除一个或设置为空一个, 就会减少一个。
  "independent": {
    // "key_code": "key_sound"
    "21": {
      "down": {
        "key_sound": {
          "path": "key_sound_name_1_down", // 如果path为空, 则继续低优先级检测

          "random": "true" // 如果是随机的, 则调用全局的随机配置(即使全局的设置选的是固定的); 如果为false或空, 则调用全局配置

          // 全局配置如果是固定某个音频, 则会调用这个固定的音频, 如果是随机, 仍会调用全局的随机(即使is_random为false)
        }
      },
      "up": {
        "mode": "",
        "key_sound": "key_sound_name_1_up"
      }
    }
  }
}
